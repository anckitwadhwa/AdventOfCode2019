    1: import math
    1: import cProfile
    1: import time 
    1: from inspect import currentframe
       
    1: def perform_FFT_phase(number_str, debug_prints = False):
       
           # number_str = str(number)
           digits = len(number_str)
           if(debug_prints):
               print(f'number length:{digits}, number:{number_str}')
               
           # initialize to original string to avoid performance hit of resizing
           computedFFT_list = list(number_str)
           
           for i in range(digits):
               if(i % 100 == 0):
                   print(f'i:{i}')
               new_digit_str = perform_FFT_phase_for_digit(i + 1, number_str, debug_prints)
               computedFFT_list[i] = new_digit_str
       
           computedFFT_str = "".join(computedFFT_list)
           if(debug_prints):
               print(computedFFT_str)
           
           return(computedFFT_str)
       
    1: def perform_FFT_phase_for_digit(digit_number, number_str, debug_prints = False):
           
    1:     pr = cProfile.Profile()
    1:     pr.enable()
    1:     if(digit_number == 0):
               print("digit_number needs to be >0")
               return ""
           
    1:     N = len(number_str)
    1:     n = digit_number
           
           # pattern_str = ""
    1:     sum_product = 0
    1:     current_pos = 0
           
           # ignore first (n-1) digits
    1:     current_pos += (n-1)
           # pattern_str = "0" * (n-1)
           
 4083:     while(current_pos < N):
               #for next n digits, add to sum_product
 4082:         i = 0
 8164:         while((current_pos < N) and (i < n)):
 4082:             sum_product += int(number_str[current_pos])
 4082:             i += 1
 4082:             current_pos += 1
               
               # pattern_str = pattern_str + ("1" * i)
           
               # ignore next n digits
 4082:         current_pos += n
               # pattern_str = pattern_str + ("0" * n)
           
               #for next n digits, subtract from sum_product
 4082:         i = 0
 8164:         while((current_pos < N) and (i < n)):
 4082:             sum_product -= int(number_str[current_pos])
 4082:             i += 1
 4082:             current_pos += 1
               
               # ignore next n digits
 4082:         current_pos += n
               # pattern_str = pattern_str + ("-1" * i)
               
               #repeat
           
    1:     FFT_digit_str = str(abs(sum_product) % 10)
           
    1:     if(debug_prints):
               # (n - 1) + k * (4*n) + x = N
               k = math.floor((N - (n-1))/ (4*n))
               x = N - (n-1) - k * 4*n
               
               expected_zeros = (n-1) + k*2*n
               expected_positive_ones = k*n
               expected_negative_ones = k*n
               if(x > 3*n):
                   expected_positive_ones += n
                   expected_zeros += n
                   expected_negative_ones += n
                   expected_zeros += (x - 3*n)
               elif (x > 2*n):
                   expected_positive_ones += n
                   expected_zeros += n
                   expected_negative_ones += (x - 2*n)
               elif (x > n):
                   expected_positive_ones += n
                   expected_zeros += (x - n)
               else:
                   expected_positive_ones += x
       
               # print(f'index_into_base_sequence_str:{index_into_base_sequence_str}; pattern_str was:{pattern_str}; computed FFT_digit:{FFT_digit_str}')
               num_zeros_in_pattern = pattern_str.count("0")
               num_negative_1s_in_pattern = pattern_str.count("-")
               num_positive_1s_in_pattern = pattern_str.count("1") - num_negative_1s_in_pattern
               print(f'For digit:{digit_number}\npattern str 0, 1, -1: {num_zeros_in_pattern, num_positive_1s_in_pattern, num_negative_1s_in_pattern}')
               print(f'expected pattern str 0, 1, -1: {expected_zeros, expected_positive_ones, expected_negative_ones}')
               print(f'computed FFT_digit:{FFT_digit_str}')
       
    1:     pr.disable()
    1:     pr.print_stats(sort='time')
           
    1:     return(FFT_digit_str)
       
    1: def unit_tests():
       
           print("=" * 75)
           print("Begin unit tests")
           
           expected_answer = "4"
           actual_answer = perform_FFT_phase_for_digit(1, "12345678", False)
           if(actual_answer != expected_answer):
               print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
       
           expected_answer = "1"
           actual_answer = perform_FFT_phase_for_digit(6, "12345678", False)
           if(actual_answer != expected_answer):
               print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
           # big_number = "59702216318401831752516109671812909117759516365269440231257788008453756734827826476239905226493589006960132456488870290862893703535753691507244120156137802864317330938106688973624124594371608170692569855778498105517439068022388323566624069202753437742801981883473729701426171077277920013824894757938493999640593305172570727136129712787668811072014245905885251704882055908305407719142264325661477825898619802777868961439647723408833957843810111456367464611239017733042717293598871566304020426484700071315257217011872240492395451028872856605576492864646118292500813545747868096046577484535223887886476125746077660705155595199557168004672030769602168262"
           # big_number_len = len(big_number)
           # expected_answer = "1"
           # for digit_number in range(103, 104):
               # actual_answer = perform_FFT_phase_for_digit(digit_number, big_number, True)
           # if(actual_answer != expected_answer):
               # print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
       
           expected_answer = "48226158"
           actual_answer = perform_FFT_phase("12345678", False)
           if(actual_answer != expected_answer):
               print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
           expected_answer = "03415518"
           actual_answer = perform_FFT_phase("34040438", False)
           if(actual_answer != expected_answer):
               print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
           expected_answer = "01029498"
           actual_answer = perform_FFT_phase("03415518", False)
           if(actual_answer != expected_answer):
               print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
           
           expected_answer = "24176176"
           actual_answer = solve_day_16_puzzle("80871224585914546619083218645595", 100, False)
           actual_answer = actual_answer[0:8]
           if(actual_answer != expected_answer):
               print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
           expected_answer = "73745418"
           actual_answer = solve_day_16_puzzle("19617804207202209144916044189917", 100, False)
           actual_answer = actual_answer[0:8]
           if(actual_answer != expected_answer):
               print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
           expected_answer = "52432133"
           actual_answer = solve_day_16_puzzle("69317163492948606335995924319873", 100, False)
           actual_answer = actual_answer[0:8]
           if(actual_answer != expected_answer):
               print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
       
           # expected_answer = "84462026"
           # cProfile.run('actual_answer = solve_day_16_puzzle_b("03036732577212944063491565474664", True)')
           # actual_answer = actual_answer[0:8]
           # if(actual_answer != expected_answer):
               # print(f'Unit test failed. Expected:{expected_answer}; actual:{actual_answer}; line#:{currentframe().f_lineno}')
       
           
           print("Unit tests complete")
           print("=" * 75)
       
       
    1: def solve_day_16_puzzle(number_str, num_phases = 100, debug_prints = False):
           print("*" * 75)
           # print(number_str)
           return_val = 0
           number_str_copy = number_str
           for i in range(num_phases):
               number_str = perform_FFT_phase(number_str, debug_prints)
               if(i % 20 == 0):
                   # print(f'i:{i}; FFT:{number_str}; len:{len(number_str)}')
                   print(f'i:{i}; len:{len(number_str)}')
               
           return_val = number_str
           # print(number_str, len(number_str))
           print(number_str[0:8])
           
           print("$" * 50)
           # try one more
           # number_str = perform_FFT_phase(number_str, debug_prints)
           # print(number_str, len(number_str))
           # print(number_str[0:8])
           
           return(return_val)
           
       
    1: def get_offset(input_str, debug_prints = False):
       
    1:     return(int(input_str[0:7]))
           
           
    1: def get_relevant_mesage_signal(base_signal, num_repetitions, debug_prints = False):
       
    1:     N_base_signal = len(base_signal)
           
    1:     message_offset = get_offset(base_signal, debug_prints)
    1:     N_relevant_message_signal = N_base_signal * num_repetitions - message_offset
           
    1:     if(debug_prints):
    1:         print(f':message_offset{message_offset}; N_base_signal:{N_base_signal}; N_relevant_message_signal:{N_relevant_message_signal}')
           
           # fill with base_input_str starting at appropriate offset
    1:     relevant_message_signal = base_signal[message_offset % N_base_signal : ]
           
           # then put 'k' copies of base signal
    1:     current_len = len(relevant_message_signal)
    1:     k = int((N_relevant_message_signal - current_len) / N_base_signal)
    1:     relevant_message_signal += base_signal * k
       
    1:     return(relevant_message_signal)
       
       
    1: def solve_day_16_puzzle_b(input_str, debug_prints = False):
           relevant_message_signal = get_relevant_mesage_signal(input_str, 10000, False)
           
           return(solve_day_16_puzzle(relevant_message_signal, 2, False))
           return("12345678")
           
    1: def do_profile():
           
    1:     base_signal = "03036732577212944063491565474664"
    1:     relevant_message_signal = get_relevant_mesage_signal(base_signal, 10000, True)
           
    1:     perform_FFT_phase_for_digit(1, relevant_message_signal, False)
           
           # for digit in range(1, 101):
               # if(digit % 10 == 0):
                   # print(f'digit:{digit}')
               # perform_FFT_phase_for_digit(digit, relevant_message_signal, False)
           
           # perform_FFT_phase(relevant_message_signal, False)
           
              
        
       # unit_tests()
       # cProfile.run('do_profile()')
       
    1: do_profile()
       # puzzle_input = "1234567"
       # solve_day_16_puzzle(puzzle_input, 5, True)
       
       
       # puzzle_input = "80871224585914546619083218645595"
       # solve_day_16_puzzle(puzzle_input)
       
       # puzzle_input = "19617804207202209144916044189917"
       # solve_day_16_puzzle(puzzle_input)
       
       # puzzle_input = "69317163492948606335995924319873"
       # solve_day_16_puzzle(puzzle_input)
       
       # puzzle_input = "5970221631840183175251610967181290911775951636526944023125778800845375673482782647623990522649358900"
       # solve_day_16_puzzle(puzzle_input, 1, True)
       
       # puzzle_input = "59702216318401831752516109671812909117759516365269440231257788008453756734827826476239905226493589006960132456488870290862893703535753691507244120156137802864317330938106688973624124594371608170692569855778498105517439068022388323566624069202753437742801981883473729701426171077277920013824894757938493999640593305172570727136129712787668811072014245905885251704882055908305407719142264325661477825898619802777868961439647723408833957843810111456367464611239017733042717293598871566304020426484700071315257217011872240492395451028872856605576492864646118292500813545747868096046577484535223887886476125746077660705155595199557168004672030769602168262"
       # solve_day_16_puzzle(puzzle_input)
       
       
       # puzzle_input = "12340000"
       # solve_day_16_puzzle(puzzle_input)
       
       # puzzle_input = "00005678"
       # solve_day_16_puzzle(puzzle_input)
       
       # puzzle_input = "12345678"
       # solve_day_16_puzzle(puzzle_input)
       
       
       
